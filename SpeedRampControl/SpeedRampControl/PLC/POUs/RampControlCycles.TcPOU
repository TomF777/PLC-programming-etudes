<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="RampControlCycles" Id="{8513c7a0-2003-42e8-aa48-52eacb703ef0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RampControlCycles
VAR_INPUT
	Start					:	BOOL;
	Stop					:	BOOL;
	RampUpTime				:	UINT;				// ramp up time in seconds
	ContDutyTime			:	UINT;				// continous duty time in seconds
	RampDownTime			:	UINT;				// ramp down time in seconds
	RampMinVal				:	REAL;				// output min value
	RampMaxVal				:	REAL;				// output max value
	PlcCycleTimeMs			:	UINT;				// PLC cycle in miliseconds
END_VAR
VAR_OUTPUT
	Out						:	REAL;
	ErrorConfig				:	BOOL;
END_VAR
VAR
	rtStart					:	R_TRIG;
	rtStop					:	R_TRIG;
	SeqStep					:	(IDLE, INIT, RAMP_UP, CONTINOUS_DUTY, RAMP_DOWN);
	RampUpPoints			: 	UINT;
	RampDownPoints			: 	UINT;
	ContDutyPoints			:	UINT;
	
	RampUpValRes			:	REAL;
	RampDownValRes			:	REAL;
	RampUpCycles			:	UINT;
	RampDownCycles			:	UINT;		
	ContDutyCycles			:	UINT;
	
	InitBit					:	BOOL:=TRUE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
This FB generates output signal ramps including three areas:
- up ramp (in seconds)
- continous duty (in seconds)
- down ramp (in seconds)

Start cycle with <Start> pulse.
The output signal can be stopped with <Stop> pulse during ramp up and cont. duty cycle. 
It ramps down in that case to avoid immediate stop (any demage of the controlled device).  
*)

IF InitBit THEN
	// check input parameters for unvalid values
	IF PlcCycleTimeMs=0 OR RampUpTime=0 OR RampDownTime=0 THEN
		ErrorConfig := TRUE;
	ELSE;
		ErrorConfig := FALSE;
	
		(*init calculations*)
		// number of cycle points during ramp up 
		RampUpPoints 	:= TO_UINT(TO_REAL(RampUpTime) / (TO_REAL(PlcCycleTimeMs) / 1000.0));
		// output value resolution for each cycle during ramp up
		RampUpValRes	:= (RampMaxVal - RampMinVal) / TO_REAL(RampUpPoints);
		
		// number of cycle points during continous duty
		ContDutyPoints := TO_UINT(TO_REAL(ContDutyTime) / (TO_REAL(PlcCycleTimeMs) / 1000.0));
		
		// number of cycle points during ramp down
		RampDownPoints	:= TO_UINT(TO_REAL(RampDownTime) / (TO_REAL(PlcCycleTimeMs) / 1000.0));
		// output value resolution for each cycle during ramp down
		RampDownValRes	:= (RampMaxVal - RampMinVal) / TO_REAL(RampDownPoints);
	END_IF
	
	InitBit			:= FALSE;
END_IF

// detect pushbuttons action
rtStart(CLK:=Start);
rtStop(CLK:=Stop);

IF rtStart.Q AND SeqStep=IDLE AND NOT ErrorConfig THEN
	SeqStep := INIT;
END_IF

IF rtStop.Q AND (SeqStep=CONTINOUS_DUTY OR SeqStep=RAMP_UP) THEN
	SeqStep := RAMP_DOWN;
END_IF


CASE SeqStep OF
	IDLE:
		;
	INIT:
		Out				:= RampMinVal;
		RampUpCycles 	:= 0;
		ContDutyCycles	:= 0;
		RampDownCycles	:= 0;
		SeqStep			:= RAMP_UP;
		
	RAMP_UP:
		Out := Out + RampUpValRes;
		RampUpCycles := RampUpCycles+1;
		IF RampUpCycles > RampUpPoints THEN SeqStep := CONTINOUS_DUTY; END_IF
		
	CONTINOUS_DUTY:
		ContDutyCycles := ContDutyCycles+1;
		IF ContDutyCycles > ContDutyPoints THEN SeqStep := RAMP_DOWN; END_IF
		
	RAMP_DOWN:
		IF (Out - RampDownValRes) > RampMinVal THEN
			Out := Out - RampDownValRes;
		ELSE
			Out := RampMinVal;
		END_IF
		
		RampDownCycles := RampDownCycles+1;
		IF RampDownCycles > RampDownPoints THEN SeqStep := IDLE; END_IF
END_CASE


	

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>